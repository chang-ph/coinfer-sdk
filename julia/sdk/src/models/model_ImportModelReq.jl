# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ImportModelReq

    ImportModelReq(;
        repo=nothing,
        branch="",
        type=nothing,
        model_name=nothing,
    )

    - repo::String : repo in the form of repo_owner/repo_name or gist id in case of importing from gist
    - branch::String : branch name or gist description in case of importing from gist
    - type::String : repo or gist
    - model_name::String : model name
"""
Base.@kwdef mutable struct ImportModelReq <: OpenAPI.APIModel
    repo::Union{Nothing, String} = nothing
    branch::Union{Nothing, String} = ""
    type::Union{Nothing, String} = nothing
    model_name::Union{Nothing, String} = nothing

    function ImportModelReq(repo, branch, type, model_name, )
        OpenAPI.validate_property(ImportModelReq, Symbol("repo"), repo)
        OpenAPI.validate_property(ImportModelReq, Symbol("branch"), branch)
        OpenAPI.validate_property(ImportModelReq, Symbol("type"), type)
        OpenAPI.validate_property(ImportModelReq, Symbol("model_name"), model_name)
        return new(repo, branch, type, model_name, )
    end
end # type ImportModelReq

const _property_types_ImportModelReq = Dict{Symbol,String}(Symbol("repo")=>"String", Symbol("branch")=>"String", Symbol("type")=>"String", Symbol("model_name")=>"String", )
OpenAPI.property_type(::Type{ ImportModelReq }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImportModelReq[name]))}

function check_required(o::ImportModelReq)
    o.repo === nothing && (return false)
    o.type === nothing && (return false)
    o.model_name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ImportModelReq }, name::Symbol, val)



    if name === Symbol("type")
        OpenAPI.validate_param(name, "ImportModelReq", :enum, val, ["repo", "gist"])
    end


end
