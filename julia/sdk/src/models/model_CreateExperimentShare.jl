# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateExperimentShare

    CreateExperimentShare(;
        object_type=nothing,
        objid=nothing,
        password="",
        target_user="",
    )

    - object_type::String
    - objid::String
    - password::String
    - target_user::String
"""
Base.@kwdef mutable struct CreateExperimentShare <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    objid::Union{Nothing, String} = nothing
    password::Union{Nothing, String} = ""
    target_user::Union{Nothing, String} = ""

    function CreateExperimentShare(object_type, objid, password, target_user, )
        OpenAPI.validate_property(CreateExperimentShare, Symbol("object_type"), object_type)
        OpenAPI.validate_property(CreateExperimentShare, Symbol("objid"), objid)
        OpenAPI.validate_property(CreateExperimentShare, Symbol("password"), password)
        OpenAPI.validate_property(CreateExperimentShare, Symbol("target_user"), target_user)
        return new(object_type, objid, password, target_user, )
    end
end # type CreateExperimentShare

const _property_types_CreateExperimentShare = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("objid")=>"String", Symbol("password")=>"String", Symbol("target_user")=>"String", )
OpenAPI.property_type(::Type{ CreateExperimentShare }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateExperimentShare[name]))}

function check_required(o::CreateExperimentShare)
    o.object_type === nothing && (return false)
    o.objid === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateExperimentShare }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "CreateExperimentShare", :enum, val, ["share"])
    end




end