# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExperimentCloudwatchLogRsp

    ExperimentCloudwatchLogRsp(;
        object_type=nothing,
        logs=nothing,
    )

    - object_type::String
    - logs::Vector{Vector{Any}}
"""
Base.@kwdef mutable struct ExperimentCloudwatchLogRsp <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    logs::Union{Nothing, Vector{Vector{Any}}} = nothing

    function ExperimentCloudwatchLogRsp(object_type, logs, )
        OpenAPI.validate_property(ExperimentCloudwatchLogRsp, Symbol("object_type"), object_type)
        OpenAPI.validate_property(ExperimentCloudwatchLogRsp, Symbol("logs"), logs)
        return new(object_type, logs, )
    end
end # type ExperimentCloudwatchLogRsp

const _property_types_ExperimentCloudwatchLogRsp = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("logs")=>"Vector{Vector{Any}}", )
OpenAPI.property_type(::Type{ ExperimentCloudwatchLogRsp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExperimentCloudwatchLogRsp[name]))}

function check_required(o::ExperimentCloudwatchLogRsp)
    o.object_type === nothing && (return false)
    o.logs === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ExperimentCloudwatchLogRsp }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "ExperimentCloudwatchLogRsp", :enum, val, ["experiment.cloudwatch_log"])
    end


end
