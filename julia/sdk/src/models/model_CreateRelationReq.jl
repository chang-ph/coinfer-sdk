# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateRelationReq

    CreateRelationReq(;
        object_type=nothing,
        object1_id=nothing,
        object2_id=nothing,
    )

    - object_type::String
    - object1_id::String
    - object2_id::String
"""
Base.@kwdef mutable struct CreateRelationReq <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    object1_id::Union{Nothing, String} = nothing
    object2_id::Union{Nothing, String} = nothing

    function CreateRelationReq(object_type, object1_id, object2_id, )
        OpenAPI.validate_property(CreateRelationReq, Symbol("object_type"), object_type)
        OpenAPI.validate_property(CreateRelationReq, Symbol("object1_id"), object1_id)
        OpenAPI.validate_property(CreateRelationReq, Symbol("object2_id"), object2_id)
        return new(object_type, object1_id, object2_id, )
    end
end # type CreateRelationReq

const _property_types_CreateRelationReq = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("object1_id")=>"String", Symbol("object2_id")=>"String", )
OpenAPI.property_type(::Type{ CreateRelationReq }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateRelationReq[name]))}

function check_required(o::CreateRelationReq)
    o.object_type === nothing && (return false)
    o.object1_id === nothing && (return false)
    o.object2_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateRelationReq }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "CreateRelationReq", :enum, val, ["relation"])
    end



end
