# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExperimentSampleDataRsp

    ExperimentSampleDataRsp(;
        object_type=nothing,
        url=nothing,
        progress=nothing,
        message="",
    )

    - object_type::String
    - url::String
    - progress::String
    - message::String
"""
Base.@kwdef mutable struct ExperimentSampleDataRsp <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    progress::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = ""

    function ExperimentSampleDataRsp(object_type, url, progress, message, )
        OpenAPI.validate_property(ExperimentSampleDataRsp, Symbol("object_type"), object_type)
        OpenAPI.validate_property(ExperimentSampleDataRsp, Symbol("url"), url)
        OpenAPI.validate_property(ExperimentSampleDataRsp, Symbol("progress"), progress)
        OpenAPI.validate_property(ExperimentSampleDataRsp, Symbol("message"), message)
        return new(object_type, url, progress, message, )
    end
end # type ExperimentSampleDataRsp

const _property_types_ExperimentSampleDataRsp = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("url")=>"String", Symbol("progress")=>"String", Symbol("message")=>"String", )
OpenAPI.property_type(::Type{ ExperimentSampleDataRsp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExperimentSampleDataRsp[name]))}

function check_required(o::ExperimentSampleDataRsp)
    o.object_type === nothing && (return false)
    o.url === nothing && (return false)
    o.progress === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ExperimentSampleDataRsp }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "ExperimentSampleDataRsp", :enum, val, ["experiment.sampledata"])
    end




end