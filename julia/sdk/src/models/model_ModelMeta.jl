# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelMeta

    ModelMeta(;
        project_file="Project.toml",
        entrance_file="main.jl",
        entrance_func="model",
        manifest="Manifest.toml",
    )

    - project_file::String
    - entrance_file::String
    - entrance_func::String
    - manifest::String
"""
Base.@kwdef mutable struct ModelMeta <: OpenAPI.APIModel
    project_file::Union{Nothing, String} = "Project.toml"
    entrance_file::Union{Nothing, String} = "main.jl"
    entrance_func::Union{Nothing, String} = "model"
    manifest::Union{Nothing, String} = "Manifest.toml"

    function ModelMeta(project_file, entrance_file, entrance_func, manifest, )
        OpenAPI.validate_property(ModelMeta, Symbol("project_file"), project_file)
        OpenAPI.validate_property(ModelMeta, Symbol("entrance_file"), entrance_file)
        OpenAPI.validate_property(ModelMeta, Symbol("entrance_func"), entrance_func)
        OpenAPI.validate_property(ModelMeta, Symbol("manifest"), manifest)
        return new(project_file, entrance_file, entrance_func, manifest, )
    end
end # type ModelMeta

const _property_types_ModelMeta = Dict{Symbol,String}(Symbol("project_file")=>"String", Symbol("entrance_file")=>"String", Symbol("entrance_func")=>"String", Symbol("manifest")=>"String", )
OpenAPI.property_type(::Type{ ModelMeta }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelMeta[name]))}

function check_required(o::ModelMeta)
    true
end

function OpenAPI.validate_property(::Type{ ModelMeta }, name::Symbol, val)




end
