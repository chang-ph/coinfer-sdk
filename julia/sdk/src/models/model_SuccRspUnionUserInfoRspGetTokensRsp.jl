# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SuccRsp_Union_UserInfoRsp__GetTokensRsp__

    SuccRspUnionUserInfoRspGetTokensRsp(;
        status=nothing,
        data=nothing,
    )

    - status::String
    - data::Data
"""
Base.@kwdef mutable struct SuccRspUnionUserInfoRspGetTokensRsp <: OpenAPI.APIModel
    status::Union{Nothing, String} = nothing
    data = nothing # spec type: Union{ Nothing, Data }

    function SuccRspUnionUserInfoRspGetTokensRsp(status, data, )
        OpenAPI.validate_property(SuccRspUnionUserInfoRspGetTokensRsp, Symbol("status"), status)
        OpenAPI.validate_property(SuccRspUnionUserInfoRspGetTokensRsp, Symbol("data"), data)
        return new(status, data, )
    end
end # type SuccRspUnionUserInfoRspGetTokensRsp

const _property_types_SuccRspUnionUserInfoRspGetTokensRsp = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("data")=>"Data", )
OpenAPI.property_type(::Type{ SuccRspUnionUserInfoRspGetTokensRsp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SuccRspUnionUserInfoRspGetTokensRsp[name]))}

function check_required(o::SuccRspUnionUserInfoRspGetTokensRsp)
    o.status === nothing && (return false)
    o.data === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SuccRspUnionUserInfoRspGetTokensRsp }, name::Symbol, val)

    if name === Symbol("status")
        OpenAPI.validate_param(name, "SuccRspUnionUserInfoRspGetTokensRsp", :enum, val, ["ok"])
    end


end
