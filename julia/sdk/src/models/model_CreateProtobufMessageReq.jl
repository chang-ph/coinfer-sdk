# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateProtobufMessageReq

    CreateProtobufMessageReq(;
        object_type=nothing,
        batch_id=nothing,
        run_id=nothing,
        logs=nothing,
    )

    - object_type::String
    - batch_id::String
    - run_id::String
    - logs::Vector{DataTyping}
"""
Base.@kwdef mutable struct CreateProtobufMessageReq <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    batch_id::Union{Nothing, String} = nothing
    run_id::Union{Nothing, String} = nothing
    logs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DataTyping} }

    function CreateProtobufMessageReq(object_type, batch_id, run_id, logs, )
        OpenAPI.validate_property(CreateProtobufMessageReq, Symbol("object_type"), object_type)
        OpenAPI.validate_property(CreateProtobufMessageReq, Symbol("batch_id"), batch_id)
        OpenAPI.validate_property(CreateProtobufMessageReq, Symbol("run_id"), run_id)
        OpenAPI.validate_property(CreateProtobufMessageReq, Symbol("logs"), logs)
        return new(object_type, batch_id, run_id, logs, )
    end
end # type CreateProtobufMessageReq

const _property_types_CreateProtobufMessageReq = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("batch_id")=>"String", Symbol("run_id")=>"String", Symbol("logs")=>"Vector{DataTyping}", )
OpenAPI.property_type(::Type{ CreateProtobufMessageReq }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateProtobufMessageReq[name]))}

function check_required(o::CreateProtobufMessageReq)
    o.object_type === nothing && (return false)
    o.batch_id === nothing && (return false)
    o.run_id === nothing && (return false)
    o.logs === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateProtobufMessageReq }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "CreateProtobufMessageReq", :enum, val, ["experiment.protobuf_message"])
    end




end
