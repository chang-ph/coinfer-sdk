# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateModel

    CreateModel(;
        object_type=nothing,
        repo="",
        branch="",
        type="local",
        model_name="",
        env=nothing,
        name="",
        content=nothing,
        is_demo=false,
    )

    - object_type::String
    - repo::String : repo in the form of repo_owner/repo_name or gist id in case of importing from gist
    - branch::String : branch name or gist description in case of importing from gist
    - type::String : repo or gist
    - model_name::String : [deprecated] model name
    - env::String
    - name::String : model name
    - content::ModelContent
    - is_demo::Bool
"""
Base.@kwdef mutable struct CreateModel <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    repo::Union{Nothing, String} = ""
    branch::Union{Nothing, String} = ""
    type::Union{Nothing, String} = "local"
    model_name::Union{Nothing, String} = ""
    env::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = ""
    content = nothing # spec type: Union{ Nothing, ModelContent }
    is_demo::Union{Nothing, Bool} = false

    function CreateModel(object_type, repo, branch, type, model_name, env, name, content, is_demo, )
        OpenAPI.validate_property(CreateModel, Symbol("object_type"), object_type)
        OpenAPI.validate_property(CreateModel, Symbol("repo"), repo)
        OpenAPI.validate_property(CreateModel, Symbol("branch"), branch)
        OpenAPI.validate_property(CreateModel, Symbol("type"), type)
        OpenAPI.validate_property(CreateModel, Symbol("model_name"), model_name)
        OpenAPI.validate_property(CreateModel, Symbol("env"), env)
        OpenAPI.validate_property(CreateModel, Symbol("name"), name)
        OpenAPI.validate_property(CreateModel, Symbol("content"), content)
        OpenAPI.validate_property(CreateModel, Symbol("is_demo"), is_demo)
        return new(object_type, repo, branch, type, model_name, env, name, content, is_demo, )
    end
end # type CreateModel

const _property_types_CreateModel = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("repo")=>"String", Symbol("branch")=>"String", Symbol("type")=>"String", Symbol("model_name")=>"String", Symbol("env")=>"String", Symbol("name")=>"String", Symbol("content")=>"ModelContent", Symbol("is_demo")=>"Bool", )
OpenAPI.property_type(::Type{ CreateModel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateModel[name]))}

function check_required(o::CreateModel)
    o.object_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateModel }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "CreateModel", :enum, val, ["model"])
    end




    if name === Symbol("type")
        OpenAPI.validate_param(name, "CreateModel", :enum, val, ["repo", "gist", "local"])
    end






end
