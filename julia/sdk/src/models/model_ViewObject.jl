# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ViewObject

    ViewObject(;
        object_type="",
        share_id="",
        sampledata=false,
        fmt="csv",
        cloudwatch_log=false,
        batch_id="",
        run_id="",
        plot=false,
    )

    - object_type::String
    - share_id::String :                  Only appicable to object_type &#x3D;&#x3D; model or object_type &#x3D;&#x3D; experiment                 If this field is empty, returns the latest version of the objects.                 otherwise returns the specified share snapshot
    - sampledata::Bool
    - fmt::String
    - cloudwatch_log::Bool
    - batch_id::String
    - run_id::String
    - plot::Bool : get arviz plot
"""
Base.@kwdef mutable struct ViewObject <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = ""
    share_id::Union{Nothing, String} = ""
    sampledata::Union{Nothing, Bool} = false
    fmt::Union{Nothing, String} = "csv"
    cloudwatch_log::Union{Nothing, Bool} = false
    batch_id::Union{Nothing, String} = ""
    run_id::Union{Nothing, String} = ""
    plot::Union{Nothing, Bool} = false

    function ViewObject(object_type, share_id, sampledata, fmt, cloudwatch_log, batch_id, run_id, plot, )
        OpenAPI.validate_property(ViewObject, Symbol("object_type"), object_type)
        OpenAPI.validate_property(ViewObject, Symbol("share_id"), share_id)
        OpenAPI.validate_property(ViewObject, Symbol("sampledata"), sampledata)
        OpenAPI.validate_property(ViewObject, Symbol("fmt"), fmt)
        OpenAPI.validate_property(ViewObject, Symbol("cloudwatch_log"), cloudwatch_log)
        OpenAPI.validate_property(ViewObject, Symbol("batch_id"), batch_id)
        OpenAPI.validate_property(ViewObject, Symbol("run_id"), run_id)
        OpenAPI.validate_property(ViewObject, Symbol("plot"), plot)
        return new(object_type, share_id, sampledata, fmt, cloudwatch_log, batch_id, run_id, plot, )
    end
end # type ViewObject

const _property_types_ViewObject = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("share_id")=>"String", Symbol("sampledata")=>"Bool", Symbol("fmt")=>"String", Symbol("cloudwatch_log")=>"Bool", Symbol("batch_id")=>"String", Symbol("run_id")=>"String", Symbol("plot")=>"Bool", )
OpenAPI.property_type(::Type{ ViewObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ViewObject[name]))}

function check_required(o::ViewObject)
    true
end

function OpenAPI.validate_property(::Type{ ViewObject }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "ViewObject", :enum, val, ["model", "experiment", "share", "event", "callback", "relation", ""])
    end




    if name === Symbol("fmt")
        OpenAPI.validate_param(name, "ViewObject", :enum, val, ["csv", "grist", "arviz"])
    end





end
