# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ViewObject

    ViewObject(;
        object_type=nothing,
        share_id="",
    )

    - object_type::String
    - share_id::String :                  Only appicable to object_type &#x3D;&#x3D; model or object_type &#x3D;&#x3D; experiment                 If this field is empty, returns the latest version of the objects.                 otherwise returns the specified share snapshot
"""
Base.@kwdef mutable struct ViewObject <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    share_id::Union{Nothing, String} = ""

    function ViewObject(object_type, share_id, )
        OpenAPI.validate_property(ViewObject, Symbol("object_type"), object_type)
        OpenAPI.validate_property(ViewObject, Symbol("share_id"), share_id)
        return new(object_type, share_id, )
    end
end # type ViewObject

const _property_types_ViewObject = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("share_id")=>"String", )
OpenAPI.property_type(::Type{ ViewObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ViewObject[name]))}

function check_required(o::ViewObject)
    o.object_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ViewObject }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "ViewObject", :enum, val, ["model", "experiment", "share"])
    end


end
