# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateExperiment

    CreateExperiment(;
        object_type=nothing,
        model_id=nothing,
        xp_meta=nothing,
        meta=nothing,
        name="",
    )

    - object_type::String
    - model_id::String
    - xp_meta::Any
    - meta::Any
    - name::String
"""
Base.@kwdef mutable struct CreateExperiment <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    model_id::Union{Nothing, String} = nothing
    xp_meta::Union{Nothing, Any} = nothing
    meta::Union{Nothing, Any} = nothing
    name::Union{Nothing, String} = ""

    function CreateExperiment(object_type, model_id, xp_meta, meta, name, )
        OpenAPI.validate_property(CreateExperiment, Symbol("object_type"), object_type)
        OpenAPI.validate_property(CreateExperiment, Symbol("model_id"), model_id)
        OpenAPI.validate_property(CreateExperiment, Symbol("xp_meta"), xp_meta)
        OpenAPI.validate_property(CreateExperiment, Symbol("meta"), meta)
        OpenAPI.validate_property(CreateExperiment, Symbol("name"), name)
        return new(object_type, model_id, xp_meta, meta, name, )
    end
end # type CreateExperiment

const _property_types_CreateExperiment = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("model_id")=>"String", Symbol("xp_meta")=>"Any", Symbol("meta")=>"Any", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ CreateExperiment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateExperiment[name]))}

function check_required(o::CreateExperiment)
    o.object_type === nothing && (return false)
    o.model_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateExperiment }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "CreateExperiment", :enum, val, ["experiment"])
    end





end
