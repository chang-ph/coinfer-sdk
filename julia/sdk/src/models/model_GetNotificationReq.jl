# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GetNotificationReq

    GetNotificationReq(;
        page_no=1,
        page_size=100,
        status=nothing,
    )

    - page_no::Int64 : page number
    - page_size::Int64 : page size
    - status::String : Filter the notification message by read status
"""
Base.@kwdef mutable struct GetNotificationReq <: OpenAPI.APIModel
    page_no::Union{Nothing, Int64} = 1
    page_size::Union{Nothing, Int64} = 100
    status::Union{Nothing, String} = nothing

    function GetNotificationReq(page_no, page_size, status, )
        OpenAPI.validate_property(GetNotificationReq, Symbol("page_no"), page_no)
        OpenAPI.validate_property(GetNotificationReq, Symbol("page_size"), page_size)
        OpenAPI.validate_property(GetNotificationReq, Symbol("status"), status)
        return new(page_no, page_size, status, )
    end
end # type GetNotificationReq

const _property_types_GetNotificationReq = Dict{Symbol,String}(Symbol("page_no")=>"Int64", Symbol("page_size")=>"Int64", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ GetNotificationReq }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GetNotificationReq[name]))}

function check_required(o::GetNotificationReq)
    o.status === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GetNotificationReq }, name::Symbol, val)


    if name === Symbol("page_size")
        OpenAPI.validate_param(name, "GetNotificationReq", :maximum, val, 1000, false)
    end

    if name === Symbol("status")
        OpenAPI.validate_param(name, "GetNotificationReq", :enum, val, ["all", "read", "unread"])
    end

end
