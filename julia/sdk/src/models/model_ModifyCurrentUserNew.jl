# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModifyCurrentUserNew

    ModifyCurrentUserNew(;
        type="update_user",
        new_password=nothing,
        password=nothing,
    )

    - type::String
    - new_password::String
    - password::String
"""
Base.@kwdef mutable struct ModifyCurrentUserNew <: OpenAPI.APIModel
    type::Union{Nothing, String} = "update_user"
    new_password::Union{Nothing, String} = nothing
    password::Union{Nothing, String} = nothing

    function ModifyCurrentUserNew(type, new_password, password, )
        OpenAPI.validate_property(ModifyCurrentUserNew, Symbol("type"), type)
        OpenAPI.validate_property(ModifyCurrentUserNew, Symbol("new_password"), new_password)
        OpenAPI.validate_property(ModifyCurrentUserNew, Symbol("password"), password)
        return new(type, new_password, password, )
    end
end # type ModifyCurrentUserNew

const _property_types_ModifyCurrentUserNew = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("new_password")=>"String", Symbol("password")=>"String", )
OpenAPI.property_type(::Type{ ModifyCurrentUserNew }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModifyCurrentUserNew[name]))}

function check_required(o::ModifyCurrentUserNew)
    true
end

function OpenAPI.validate_property(::Type{ ModifyCurrentUserNew }, name::Symbol, val)

    if name === Symbol("type")
        OpenAPI.validate_param(name, "ModifyCurrentUserNew", :enum, val, ["update_user"])
    end



end
