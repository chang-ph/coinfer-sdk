# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModifyTokenNew

    ModifyTokenNew(;
        type="update_token",
        id=nothing,
        name=nothing,
        desc=nothing,
        expire=nothing,
    )

    - type::String
    - id::Int64
    - name::String
    - desc::String
    - expire::ZonedDateTime
"""
Base.@kwdef mutable struct ModifyTokenNew <: OpenAPI.APIModel
    type::Union{Nothing, String} = "update_token"
    id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    desc::Union{Nothing, String} = nothing
    expire::Union{Nothing, ZonedDateTime} = nothing

    function ModifyTokenNew(type, id, name, desc, expire, )
        OpenAPI.validate_property(ModifyTokenNew, Symbol("type"), type)
        OpenAPI.validate_property(ModifyTokenNew, Symbol("id"), id)
        OpenAPI.validate_property(ModifyTokenNew, Symbol("name"), name)
        OpenAPI.validate_property(ModifyTokenNew, Symbol("desc"), desc)
        OpenAPI.validate_property(ModifyTokenNew, Symbol("expire"), expire)
        return new(type, id, name, desc, expire, )
    end
end # type ModifyTokenNew

const _property_types_ModifyTokenNew = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("id")=>"Int64", Symbol("name")=>"String", Symbol("desc")=>"String", Symbol("expire")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ ModifyTokenNew }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModifyTokenNew[name]))}

function check_required(o::ModifyTokenNew)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ModifyTokenNew }, name::Symbol, val)

    if name === Symbol("type")
        OpenAPI.validate_param(name, "ModifyTokenNew", :enum, val, ["update_token"])
    end





    if name === Symbol("expire")
        OpenAPI.validate_param(name, "ModifyTokenNew", :format, val, "date-time")
    end
end
