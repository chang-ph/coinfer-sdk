# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateEventRsp

    CreateEventRsp(;
        object_type=nothing,
        name=nothing,
        short_id=nothing,
        created_at=nothing,
    )

    - object_type::String
    - name::String
    - short_id::String
    - created_at::ZonedDateTime
"""
Base.@kwdef mutable struct CreateEventRsp <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    short_id::Union{Nothing, String} = nothing
    created_at::Union{Nothing, ZonedDateTime} = nothing

    function CreateEventRsp(object_type, name, short_id, created_at, )
        OpenAPI.validate_property(CreateEventRsp, Symbol("object_type"), object_type)
        OpenAPI.validate_property(CreateEventRsp, Symbol("name"), name)
        OpenAPI.validate_property(CreateEventRsp, Symbol("short_id"), short_id)
        OpenAPI.validate_property(CreateEventRsp, Symbol("created_at"), created_at)
        return new(object_type, name, short_id, created_at, )
    end
end # type CreateEventRsp

const _property_types_CreateEventRsp = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("name")=>"String", Symbol("short_id")=>"String", Symbol("created_at")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ CreateEventRsp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateEventRsp[name]))}

function check_required(o::CreateEventRsp)
    o.object_type === nothing && (return false)
    o.name === nothing && (return false)
    o.short_id === nothing && (return false)
    o.created_at === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateEventRsp }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "CreateEventRsp", :enum, val, ["event"])
    end




    if name === Symbol("created_at")
        OpenAPI.validate_param(name, "CreateEventRsp", :format, val, "date-time")
    end
end
