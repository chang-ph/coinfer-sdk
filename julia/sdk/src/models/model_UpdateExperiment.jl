# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateExperiment

    UpdateExperiment(;
        object_type=nothing,
        action=nothing,
        meta=nothing,
        name=nothing,
        version=nothing,
        description=nothing,
        status=nothing,
    )

    - object_type::String
    - action::String
    - meta::Dict{String, Any}
    - name::String
    - version::String
    - description::String
    - status::String
"""
Base.@kwdef mutable struct UpdateExperiment <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    action::Union{Nothing, String} = nothing
    meta::Union{Nothing, Dict{String, Any}} = nothing
    name::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing

    function UpdateExperiment(object_type, action, meta, name, version, description, status, )
        OpenAPI.validate_property(UpdateExperiment, Symbol("object_type"), object_type)
        OpenAPI.validate_property(UpdateExperiment, Symbol("action"), action)
        OpenAPI.validate_property(UpdateExperiment, Symbol("meta"), meta)
        OpenAPI.validate_property(UpdateExperiment, Symbol("name"), name)
        OpenAPI.validate_property(UpdateExperiment, Symbol("version"), version)
        OpenAPI.validate_property(UpdateExperiment, Symbol("description"), description)
        OpenAPI.validate_property(UpdateExperiment, Symbol("status"), status)
        return new(object_type, action, meta, name, version, description, status, )
    end
end # type UpdateExperiment

const _property_types_UpdateExperiment = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("action")=>"String", Symbol("meta")=>"Dict{String, Any}", Symbol("name")=>"String", Symbol("version")=>"String", Symbol("description")=>"String", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ UpdateExperiment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateExperiment[name]))}

function check_required(o::UpdateExperiment)
    o.object_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UpdateExperiment }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "UpdateExperiment", :enum, val, ["experiment"])
    end




    if name === Symbol("name")
        OpenAPI.validate_param(name, "UpdateExperiment", :maxLength, val, 600)
    end

    if name === Symbol("version")
        OpenAPI.validate_param(name, "UpdateExperiment", :maxLength, val, 32)
    end


    if name === Symbol("status")
        OpenAPI.validate_param(name, "UpdateExperiment", :maxLength, val, 64)
    end
end
