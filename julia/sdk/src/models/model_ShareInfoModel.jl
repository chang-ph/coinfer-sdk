# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""_ShareInfoModel

    ShareInfoModel(;
        id=nothing,
        password=nothing,
        user_id=nothing,
        short_id=nothing,
        to_user_id=nothing,
    )

    - id::Int64
    - password::String
    - user_id::String
    - short_id::String
    - to_user_id::String
"""
Base.@kwdef mutable struct ShareInfoModel <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    password::Union{Nothing, String} = nothing
    user_id::Union{Nothing, String} = nothing
    short_id::Union{Nothing, String} = nothing
    to_user_id::Union{Nothing, String} = nothing

    function ShareInfoModel(id, password, user_id, short_id, to_user_id, )
        OpenAPI.validate_property(ShareInfoModel, Symbol("id"), id)
        OpenAPI.validate_property(ShareInfoModel, Symbol("password"), password)
        OpenAPI.validate_property(ShareInfoModel, Symbol("user_id"), user_id)
        OpenAPI.validate_property(ShareInfoModel, Symbol("short_id"), short_id)
        OpenAPI.validate_property(ShareInfoModel, Symbol("to_user_id"), to_user_id)
        return new(id, password, user_id, short_id, to_user_id, )
    end
end # type ShareInfoModel

const _property_types_ShareInfoModel = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("password")=>"String", Symbol("user_id")=>"String", Symbol("short_id")=>"String", Symbol("to_user_id")=>"String", )
OpenAPI.property_type(::Type{ ShareInfoModel }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ShareInfoModel[name]))}

function check_required(o::ShareInfoModel)
    o.id === nothing && (return false)
    o.password === nothing && (return false)
    o.user_id === nothing && (return false)
    o.short_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ShareInfoModel }, name::Symbol, val)





end
