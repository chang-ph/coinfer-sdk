# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ModelTreeNode

    ModelTreeNode(;
        name=nothing,
        type=nothing,
        content="",
        children=nothing,
    )

    - name::String
    - type::String
    - content::String
    - children::Vector{ModelTreeNode}
"""
Base.@kwdef mutable struct ModelTreeNode <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    content::Union{Nothing, String} = ""
    children::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ModelTreeNode} }

    function ModelTreeNode(name, type, content, children, )
        OpenAPI.validate_property(ModelTreeNode, Symbol("name"), name)
        OpenAPI.validate_property(ModelTreeNode, Symbol("type"), type)
        OpenAPI.validate_property(ModelTreeNode, Symbol("content"), content)
        OpenAPI.validate_property(ModelTreeNode, Symbol("children"), children)
        return new(name, type, content, children, )
    end
end # type ModelTreeNode

const _property_types_ModelTreeNode = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"String", Symbol("content")=>"String", Symbol("children")=>"Vector{ModelTreeNode}", )
OpenAPI.property_type(::Type{ ModelTreeNode }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ModelTreeNode[name]))}

function check_required(o::ModelTreeNode)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ModelTreeNode }, name::Symbol, val)


    if name === Symbol("type")
        OpenAPI.validate_param(name, "ModelTreeNode", :enum, val, ["file", "folder"])
    end



end
