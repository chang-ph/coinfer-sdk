# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ListObject

    ListObject(;
        page_no=1,
        page_size=100,
        with_share_info=false,
        shared_by_me=false,
        shared_with_me=false,
        object_type="experiment",
        status="",
        run_on="",
        has_model="",
    )

    - page_no::Int64
    - page_size::Int64
    - with_share_info::Bool : Whether to return the related share info
    - shared_by_me::Bool : Filter experiments shared by the current user
    - shared_with_me::Bool : Filter experiments shared with the current user
    - object_type::String
    - status::String
    - run_on::String
    - has_model::String
"""
Base.@kwdef mutable struct ListObject <: OpenAPI.APIModel
    page_no::Union{Nothing, Int64} = 1
    page_size::Union{Nothing, Int64} = 100
    with_share_info::Union{Nothing, Bool} = false
    shared_by_me::Union{Nothing, Bool} = false
    shared_with_me::Union{Nothing, Bool} = false
    object_type::Union{Nothing, String} = "experiment"
    status::Union{Nothing, String} = ""
    run_on::Union{Nothing, String} = ""
    has_model::Union{Nothing, String} = ""

    function ListObject(page_no, page_size, with_share_info, shared_by_me, shared_with_me, object_type, status, run_on, has_model, )
        OpenAPI.validate_property(ListObject, Symbol("page_no"), page_no)
        OpenAPI.validate_property(ListObject, Symbol("page_size"), page_size)
        OpenAPI.validate_property(ListObject, Symbol("with_share_info"), with_share_info)
        OpenAPI.validate_property(ListObject, Symbol("shared_by_me"), shared_by_me)
        OpenAPI.validate_property(ListObject, Symbol("shared_with_me"), shared_with_me)
        OpenAPI.validate_property(ListObject, Symbol("object_type"), object_type)
        OpenAPI.validate_property(ListObject, Symbol("status"), status)
        OpenAPI.validate_property(ListObject, Symbol("run_on"), run_on)
        OpenAPI.validate_property(ListObject, Symbol("has_model"), has_model)
        return new(page_no, page_size, with_share_info, shared_by_me, shared_with_me, object_type, status, run_on, has_model, )
    end
end # type ListObject

const _property_types_ListObject = Dict{Symbol,String}(Symbol("page_no")=>"Int64", Symbol("page_size")=>"Int64", Symbol("with_share_info")=>"Bool", Symbol("shared_by_me")=>"Bool", Symbol("shared_with_me")=>"Bool", Symbol("object_type")=>"String", Symbol("status")=>"String", Symbol("run_on")=>"String", Symbol("has_model")=>"String", )
OpenAPI.property_type(::Type{ ListObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ListObject[name]))}

function check_required(o::ListObject)
    true
end

function OpenAPI.validate_property(::Type{ ListObject }, name::Symbol, val)






    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "ListObject", :enum, val, ["data", "experiment"])
    end


    if name === Symbol("status")
        OpenAPI.validate_param(name, "ListObject", :enum, val, ["NEW", "RUN", "FIN", "ERR", ""])
    end


    if name === Symbol("run_on")
        OpenAPI.validate_param(name, "ListObject", :enum, val, ["Lambda", "Fargate", "Local", ""])
    end


    if name === Symbol("has_model")
        OpenAPI.validate_param(name, "ListObject", :enum, val, ["true", "false", ""])
    end

end
