# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.



@doc raw"""Data_1

    Data1(; value=nothing)
"""
mutable struct Data1 <: OpenAPI.OneOfAPIModel
    value::Any # Union{ CreateDataRsp, CreateWorkflowRsp, ExperimentCloudwatchLogRsp, ExperimentPlotRsp, ExperimentRsp, ExperimentSampleDataRsp, GetExperimentRunInfoRsp, ViewAnalyzerRsp, ViewExperimentShareRsp, ViewModelsRsp }
    Data1() = new()
    Data1(value) = new(value)
end # type Data1

function OpenAPI.property_type(::Type{ Data1 }, name::Symbol, json::Dict{String,Any})
    discriminator = json["object_type"]
    if discriminator == "data"
        return eval(Base.Meta.parse("CreateDataRsp"))
    elseif discriminator == "experiment"
        return eval(Base.Meta.parse("ExperimentRsp"))
    elseif discriminator == "experiment.cloudwatch_log"
        return eval(Base.Meta.parse("ExperimentCloudwatchLogRsp"))
    elseif discriminator == "experiment.plot"
        return eval(Base.Meta.parse("ExperimentPlotRsp"))
    elseif discriminator == "experiment.run_info"
        return eval(Base.Meta.parse("GetExperimentRunInfoRsp"))
    elseif discriminator == "experiment.sampledata"
        return eval(Base.Meta.parse("ExperimentSampleDataRsp"))
    elseif discriminator == "model"
        return eval(Base.Meta.parse("ViewModelsRsp"))
    elseif discriminator == "share"
        return eval(Base.Meta.parse("ViewExperimentShareRsp"))
    elseif discriminator == "workflow"
        return eval(Base.Meta.parse("CreateWorkflowRsp"))
    elseif discriminator == "workflow.analyzer"
        return eval(Base.Meta.parse("ViewAnalyzerRsp"))
    end
    throw(OpenAPI.ValidationException("Invalid discriminator value: $discriminator for Data1"))
end