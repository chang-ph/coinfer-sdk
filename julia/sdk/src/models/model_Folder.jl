# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""_Folder

    Folder(;
        name=nothing,
        type="folder",
        children=nothing,
    )

    - name::String
    - type::String
    - children::Vector{FolderChildrenInner}
"""
Base.@kwdef mutable struct Folder <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = "folder"
    children::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FolderChildrenInner} }

    function Folder(name, type, children, )
        OpenAPI.validate_property(Folder, Symbol("name"), name)
        OpenAPI.validate_property(Folder, Symbol("type"), type)
        OpenAPI.validate_property(Folder, Symbol("children"), children)
        return new(name, type, children, )
    end
end # type Folder

const _property_types_Folder = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"String", Symbol("children")=>"Vector{FolderChildrenInner}", )
OpenAPI.property_type(::Type{ Folder }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Folder[name]))}

function check_required(o::Folder)
    o.name === nothing && (return false)
    o.children === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Folder }, name::Symbol, val)



end
