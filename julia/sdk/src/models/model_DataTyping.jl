# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DataTyping

    DataTyping(;
        chain_name=nothing,
        iteration=nothing,
        data=nothing,
    )

    - chain_name::String
    - iteration::Int64
    - data::Vector{Dict{String, Any}}
"""
Base.@kwdef mutable struct DataTyping <: OpenAPI.APIModel
    chain_name::Union{Nothing, String} = nothing
    iteration::Union{Nothing, Int64} = nothing
    data::Union{Nothing, Vector{Dict{String, Any}}} = nothing

    function DataTyping(chain_name, iteration, data, )
        OpenAPI.validate_property(DataTyping, Symbol("chain_name"), chain_name)
        OpenAPI.validate_property(DataTyping, Symbol("iteration"), iteration)
        OpenAPI.validate_property(DataTyping, Symbol("data"), data)
        return new(chain_name, iteration, data, )
    end
end # type DataTyping

const _property_types_DataTyping = Dict{Symbol,String}(Symbol("chain_name")=>"String", Symbol("iteration")=>"Int64", Symbol("data")=>"Vector{Dict{String, Any}}", )
OpenAPI.property_type(::Type{ DataTyping }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataTyping[name]))}

function check_required(o::DataTyping)
    o.chain_name === nothing && (return false)
    o.iteration === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DataTyping }, name::Symbol, val)



end