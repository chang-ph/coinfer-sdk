# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExperimentRsp

    ExperimentRsp(;
        object_type=nothing,
        short_id="",
        name="",
        model_id="",
        status="",
        meta=nothing,
        n_chains=0,
        n_variables=0,
        n_samples=0,
        sample_update_time=OpenAPI.str2zoneddatetime(""),
        run_on="",
        input=nothing,
        output=nothing,
        share_info=nothing,
        model_name=nothing,
        workflow_id="",
        workflow_name="",
    )

    - object_type::String
    - short_id::String
    - name::String
    - model_id::String
    - status::String
    - meta::Any
    - n_chains::Int64
    - n_variables::Int64
    - n_samples::Int64
    - sample_update_time::ZonedDateTime
    - run_on::String
    - input::String
    - output::String
    - share_info::Vector{ShareInfoModel}
    - model_name::String
    - workflow_id::String
    - workflow_name::String
"""
Base.@kwdef mutable struct ExperimentRsp <: OpenAPI.APIModel
    object_type::Union{Nothing, String} = nothing
    short_id::Union{Nothing, String} = ""
    name::Union{Nothing, String} = ""
    model_id::Union{Nothing, String} = ""
    status::Union{Nothing, String} = ""
    meta::Union{Nothing, Any} = nothing
    n_chains::Union{Nothing, Int64} = 0
    n_variables::Union{Nothing, Int64} = 0
    n_samples::Union{Nothing, Int64} = 0
    sample_update_time::Union{Nothing, ZonedDateTime} = OpenAPI.str2zoneddatetime("")
    run_on::Union{Nothing, String} = ""
    input::Union{Nothing, String} = nothing
    output::Union{Nothing, String} = nothing
    share_info::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ShareInfoModel} }
    model_name::Union{Nothing, String} = nothing
    workflow_id::Union{Nothing, String} = ""
    workflow_name::Union{Nothing, String} = ""

    function ExperimentRsp(object_type, short_id, name, model_id, status, meta, n_chains, n_variables, n_samples, sample_update_time, run_on, input, output, share_info, model_name, workflow_id, workflow_name, )
        OpenAPI.validate_property(ExperimentRsp, Symbol("object_type"), object_type)
        OpenAPI.validate_property(ExperimentRsp, Symbol("short_id"), short_id)
        OpenAPI.validate_property(ExperimentRsp, Symbol("name"), name)
        OpenAPI.validate_property(ExperimentRsp, Symbol("model_id"), model_id)
        OpenAPI.validate_property(ExperimentRsp, Symbol("status"), status)
        OpenAPI.validate_property(ExperimentRsp, Symbol("meta"), meta)
        OpenAPI.validate_property(ExperimentRsp, Symbol("n_chains"), n_chains)
        OpenAPI.validate_property(ExperimentRsp, Symbol("n_variables"), n_variables)
        OpenAPI.validate_property(ExperimentRsp, Symbol("n_samples"), n_samples)
        OpenAPI.validate_property(ExperimentRsp, Symbol("sample_update_time"), sample_update_time)
        OpenAPI.validate_property(ExperimentRsp, Symbol("run_on"), run_on)
        OpenAPI.validate_property(ExperimentRsp, Symbol("input"), input)
        OpenAPI.validate_property(ExperimentRsp, Symbol("output"), output)
        OpenAPI.validate_property(ExperimentRsp, Symbol("share_info"), share_info)
        OpenAPI.validate_property(ExperimentRsp, Symbol("model_name"), model_name)
        OpenAPI.validate_property(ExperimentRsp, Symbol("workflow_id"), workflow_id)
        OpenAPI.validate_property(ExperimentRsp, Symbol("workflow_name"), workflow_name)
        return new(object_type, short_id, name, model_id, status, meta, n_chains, n_variables, n_samples, sample_update_time, run_on, input, output, share_info, model_name, workflow_id, workflow_name, )
    end
end # type ExperimentRsp

const _property_types_ExperimentRsp = Dict{Symbol,String}(Symbol("object_type")=>"String", Symbol("short_id")=>"String", Symbol("name")=>"String", Symbol("model_id")=>"String", Symbol("status")=>"String", Symbol("meta")=>"Any", Symbol("n_chains")=>"Int64", Symbol("n_variables")=>"Int64", Symbol("n_samples")=>"Int64", Symbol("sample_update_time")=>"ZonedDateTime", Symbol("run_on")=>"String", Symbol("input")=>"String", Symbol("output")=>"String", Symbol("share_info")=>"Vector{ShareInfoModel}", Symbol("model_name")=>"String", Symbol("workflow_id")=>"String", Symbol("workflow_name")=>"String", )
OpenAPI.property_type(::Type{ ExperimentRsp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExperimentRsp[name]))}

function check_required(o::ExperimentRsp)
    o.object_type === nothing && (return false)
    o.model_name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ExperimentRsp }, name::Symbol, val)

    if name === Symbol("object_type")
        OpenAPI.validate_param(name, "ExperimentRsp", :enum, val, ["experiment"])
    end










    if name === Symbol("sample_update_time")
        OpenAPI.validate_param(name, "ExperimentRsp", :format, val, "date-time")
    end







end