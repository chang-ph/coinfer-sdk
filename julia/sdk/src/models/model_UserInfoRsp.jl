# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UserInfoRsp

    UserInfoRsp(;
        id=nothing,
        username=nothing,
        super=nothing,
        roles=nothing,
        is_github_user=nothing,
    )

    - id::Int64
    - username::String
    - super::Bool
    - roles::Vector{String}
    - is_github_user::Bool
"""
Base.@kwdef mutable struct UserInfoRsp <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = nothing
    username::Union{Nothing, String} = nothing
    super::Union{Nothing, Bool} = nothing
    roles::Union{Nothing, Vector{String}} = nothing
    is_github_user::Union{Nothing, Bool} = nothing

    function UserInfoRsp(id, username, super, roles, is_github_user, )
        OpenAPI.validate_property(UserInfoRsp, Symbol("id"), id)
        OpenAPI.validate_property(UserInfoRsp, Symbol("username"), username)
        OpenAPI.validate_property(UserInfoRsp, Symbol("super"), super)
        OpenAPI.validate_property(UserInfoRsp, Symbol("roles"), roles)
        OpenAPI.validate_property(UserInfoRsp, Symbol("is_github_user"), is_github_user)
        return new(id, username, super, roles, is_github_user, )
    end
end # type UserInfoRsp

const _property_types_UserInfoRsp = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("username")=>"String", Symbol("super")=>"Bool", Symbol("roles")=>"Vector{String}", Symbol("is_github_user")=>"Bool", )
OpenAPI.property_type(::Type{ UserInfoRsp }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserInfoRsp[name]))}

function check_required(o::UserInfoRsp)
    o.id === nothing && (return false)
    o.username === nothing && (return false)
    o.super === nothing && (return false)
    o.roles === nothing && (return false)
    o.is_github_user === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UserInfoRsp }, name::Symbol, val)





end