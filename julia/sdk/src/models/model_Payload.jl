# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.



@doc raw"""Payload

    Payload(; value=nothing)
"""
mutable struct Payload <: OpenAPI.OneOfAPIModel
    value::Any # Union{ CreateCallbackReq, CreateDataReq, CreateEventReq, CreateExperiment, CreateExperimentShare, CreateModel, CreateRelationReq }
    Payload() = new()
    Payload(value) = new(value)
end # type Payload

function OpenAPI.property_type(::Type{ Payload }, name::Symbol, json::Dict{String,Any})
    discriminator = json["object_type"]
    if discriminator == "callback"
        return eval(Base.Meta.parse("CreateCallbackReq"))
    elseif discriminator == "data"
        return eval(Base.Meta.parse("CreateDataReq"))
    elseif discriminator == "event"
        return eval(Base.Meta.parse("CreateEventReq"))
    elseif discriminator == "experiment"
        return eval(Base.Meta.parse("CreateExperiment"))
    elseif discriminator == "model"
        return eval(Base.Meta.parse("CreateModel"))
    elseif discriminator == "relation"
        return eval(Base.Meta.parse("CreateRelationReq"))
    elseif discriminator == "share"
        return eval(Base.Meta.parse("CreateExperimentShare"))
    end
    throw(OpenAPI.ValidationException("Invalid discriminator value: $discriminator for Payload"))
end