# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct NotificationApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `NotificationApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ NotificationApi }) = "https://api.coinfer.ai"

const _returntypes_get_notification_NotificationApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspListingRspDataNotificationDict,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_get_notification(_api::NotificationApi, status::String; page_no=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "get_notification", :maximum, page_size, 1000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_notification_NotificationApi, "/api/notification", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page_no", page_no; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get notification messsages

Get notification messages targeting the current user.

Params:
- status::String (required)
- page_no::Int64
- page_size::Int64

Return: SuccRspListingRspDataNotificationDict, OpenAPI.Clients.ApiResponse
"""
function get_notification(_api::NotificationApi, status::String; page_no=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_notification(_api, status; page_no=page_no, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_notification(_api::NotificationApi, response_stream::Channel, status::String; page_no=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_get_notification(_api, status; page_no=page_no, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_mark_notification_read_NotificationApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspNoneType,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_mark_notification_read(_api::NotificationApi, mark_notification_read_req::MarkNotificationReadReq; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_mark_notification_read_NotificationApi, "/api/notification/mark", ["GlobalAuth", ], mark_notification_read_req)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Mark notification messsage as already read

Mark some notification as having been read by user. Listing messages support filtering by read mark.

Params:
- mark_notification_read_req::MarkNotificationReadReq (required)

Return: SuccRspNoneType, OpenAPI.Clients.ApiResponse
"""
function mark_notification_read(_api::NotificationApi, mark_notification_read_req::MarkNotificationReadReq; _mediaType=nothing)
    _ctx = _oacinternal_mark_notification_read(_api, mark_notification_read_req; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function mark_notification_read(_api::NotificationApi, response_stream::Channel, mark_notification_read_req::MarkNotificationReadReq; _mediaType=nothing)
    _ctx = _oacinternal_mark_notification_read(_api, mark_notification_read_req; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_notification
export mark_notification_read
