# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ExperimentApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ExperimentApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ExperimentApi }) = "https://api.coinfer.ai"

const _returntypes_batch_delete_experiment_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspNoneType,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_batch_delete_experiment(_api::ExperimentApi; objids=nothing, model_ids=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_batch_delete_experiment_ExperimentApi, "/mcmc/object", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "objids", objids; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_param(_ctx.query, "model_ids", model_ids; style="form", is_explode=true)  # type Vector{String}
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete experiments in batch.

Delete experiments in batch.  There are two ways to specify the experiments to be deleted: 1. By experiment IDs. In this case all experiments with the specified IDs will be deleted. 2. By model IDs. In this case all experiments with the specified model IDs will be deleted.

Params:
- objids::Vector{String}
- model_ids::Vector{String}

Return: SuccRspNoneType, OpenAPI.Clients.ApiResponse
"""
function batch_delete_experiment(_api::ExperimentApi; objids=nothing, model_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_batch_delete_experiment(_api; objids=objids, model_ids=model_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function batch_delete_experiment(_api::ExperimentApi, response_stream::Channel; objids=nothing, model_ids=nothing, _mediaType=nothing)
    _ctx = _oacinternal_batch_delete_experiment(_api; objids=objids, model_ids=model_ids, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_object_v1_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_create_object_v1(_api::ExperimentApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_object_v1_ExperimentApi, "/mcmc/object", ["GlobalAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create an experiment.

The API allows you to create a new experiment.

Params:

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function create_object_v1(_api::ExperimentApi; _mediaType=nothing)
    _ctx = _oacinternal_create_object_v1(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_object_v1(_api::ExperimentApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_create_object_v1(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_data_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspNoneType,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_delete_data(_api::ExperimentApi, objid::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_data_ExperimentApi, "/mcmc/object/D{objid}", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "objid", objid)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a data object by its ID.

NOTE: the 'D' prefix in URL is part of the ID.

Params:
- objid::String (required)

Return: SuccRspNoneType, OpenAPI.Clients.ApiResponse
"""
function delete_data(_api::ExperimentApi, objid::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_data(_api, objid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_data(_api::ExperimentApi, response_stream::Channel, objid::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_data(_api, objid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_experiment_notebook_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_experiment_notebook(_api::ExperimentApi, expid::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_experiment_notebook_ExperimentApi, "/mcmc/experiment/{expid}/notebook", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "expid", expid)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download a notebook which can be used to load and visualize the experiment result

Params:
- expid::String (required)

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function experiment_notebook(_api::ExperimentApi, expid::String; _mediaType=nothing)
    _ctx = _oacinternal_experiment_notebook(_api, expid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function experiment_notebook(_api::ExperimentApi, response_stream::Channel, expid::String; _mediaType=nothing)
    _ctx = _oacinternal_experiment_notebook(_api, expid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_experiment_notebook_colab_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_experiment_notebook_colab(_api::ExperimentApi, expid::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_experiment_notebook_colab_ExperimentApi, "/mcmc/experiment/{expid}/notebook/colab", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "expid", expid)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a link of the notebook in Colab

Create notebook which can be used to load and visualize the experiment result. Save it to Github and returns a link which can be used to open this notebook in Google Colab

Params:
- expid::String (required)

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function experiment_notebook_colab(_api::ExperimentApi, expid::String; _mediaType=nothing)
    _ctx = _oacinternal_experiment_notebook_colab(_api, expid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function experiment_notebook_colab(_api::ExperimentApi, response_stream::Channel, expid::String; _mediaType=nothing)
    _ctx = _oacinternal_experiment_notebook_colab(_api, expid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_sample_data_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspGetSampleDataRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_get_sample_data(_api::ExperimentApi, experiment_id::String, fmt::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_sample_data_ExperimentApi, "/mcmc/experiment/{experiment_id}/sampledata/{fmt}", ["SharingAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "experiment_id", experiment_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "fmt", fmt)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get sample data

It takes time for the system to build the sample data file.  If the sample data file not ready yet, the API will return with the `progress` field set to `generating` and the sample data file is then generating in the background by the system. You may need to call this API later to see if the sample data is ready.  If it is ready, the API will return with the `progress` field set to `done` and the `url` field is the presigned URL of the sample data file.

Params:
- experiment_id::String (required)
- fmt::String (required)

Return: SuccRspGetSampleDataRsp, OpenAPI.Clients.ApiResponse
"""
function get_sample_data(_api::ExperimentApi, experiment_id::String, fmt::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sample_data(_api, experiment_id, fmt; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_sample_data(_api::ExperimentApi, response_stream::Channel, experiment_id::String, fmt::String; _mediaType=nothing)
    _ctx = _oacinternal_get_sample_data(_api, experiment_id, fmt; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_objects_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListingRspListObjectRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_list_objects(_api::ExperimentApi; page_no=nothing, page_size=nothing, with_share_info=nothing, shared_by_me=nothing, shared_with_me=nothing, object_type=nothing, status=nothing, run_on=nothing, has_model=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_objects_ExperimentApi, "/mcmc/object", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page_no", page_no; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_share_info", with_share_info; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "shared_by_me", shared_by_me; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "shared_with_me", shared_with_me; style="form", is_explode=true)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "object_type", object_type; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "status", status; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "run_on", run_on; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "has_model", has_model; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List experiments or data.

### List Experiment  By default, the API returns only experiments created by the current user, excluding sharing information for performance optimization.  When `shared_with_me` is enabled, the API returns experiments owned by other users but shared with the current user, including their sharing details.  Enabling `shared_by_me` will include sharing information for experiments that the current user has shared with others.  Setting `with_share_info` to true combines both scenarios: it returns experiments shared by the current user as well as experiments shared with the current user, complete with their respective sharing information. This effectively merges the functionality of both `shared_by_me` and `shared_with_me`.

Params:
- page_no::Int64
- page_size::Int64
- with_share_info::Bool
- shared_by_me::Bool
- shared_with_me::Bool
- object_type::String
- status::String
- run_on::String
- has_model::String

Return: ListingRspListObjectRsp, OpenAPI.Clients.ApiResponse
"""
function list_objects(_api::ExperimentApi; page_no=nothing, page_size=nothing, with_share_info=nothing, shared_by_me=nothing, shared_with_me=nothing, object_type=nothing, status=nothing, run_on=nothing, has_model=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_objects(_api; page_no=page_no, page_size=page_size, with_share_info=with_share_info, shared_by_me=shared_by_me, shared_with_me=shared_with_me, object_type=object_type, status=status, run_on=run_on, has_model=has_model, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_objects(_api::ExperimentApi, response_stream::Channel; page_no=nothing, page_size=nothing, with_share_info=nothing, shared_by_me=nothing, shared_with_me=nothing, object_type=nothing, status=nothing, run_on=nothing, has_model=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_objects(_api; page_no=page_no, page_size=page_size, with_share_info=with_share_info, shared_by_me=shared_by_me, shared_with_me=shared_with_me, object_type=object_type, status=status, run_on=run_on, has_model=has_model, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_data_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_update_data(_api::ExperimentApi, objid::String, fmt::String, file::String; use=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_data_ExperimentApi, "/mcmc/object/D{objid}", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "objid", objid)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "use", use)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "fmt", fmt)  # type String
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update a data object by its ID.

NOTE: the 'D' prefix in URL is part of the ID.

Params:
- objid::String (required)
- fmt::String (required)
- file::String (required)
- use::String

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function update_data(_api::ExperimentApi, objid::String, fmt::String, file::String; use=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_data(_api, objid, fmt, file; use=use, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_data(_api::ExperimentApi, response_stream::Channel, objid::String, fmt::String, file::String; use=nothing, _mediaType=nothing)
    _ctx = _oacinternal_update_data(_api, objid, fmt, file; use=use, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_update_experiment_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_update_experiment(_api::ExperimentApi, objid::String, update_x_p::UpdateXP; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_update_experiment_ExperimentApi, "/mcmc/object/X{objid}", ["GlobalAuth", ], update_x_p)
    OpenAPI.Clients.set_param(_ctx.path, "objid", objid)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an experiment by its ID.

NOTE: the 'D' prefix in URL is part of the ID.  NOTE: The status of experiment is manipulated by the system. So normally you should not call this API to update the status.

Params:
- objid::String (required)
- update_x_p::UpdateXP (required)

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function update_experiment(_api::ExperimentApi, objid::String, update_x_p::UpdateXP; _mediaType=nothing)
    _ctx = _oacinternal_update_experiment(_api, objid, update_x_p; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function update_experiment(_api::ExperimentApi, response_stream::Channel, objid::String, update_x_p::UpdateXP; _mediaType=nothing)
    _ctx = _oacinternal_update_experiment(_api, objid, update_x_p; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_view_data_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_view_data(_api::ExperimentApi, objid::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_view_data_ExperimentApi, "/mcmc/object/D{objid}", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "objid", objid)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""View a data object by its ID.

NOTE: the 'D' prefix in URL is part of the ID.

Params:
- objid::String (required)

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function view_data(_api::ExperimentApi, objid::String; _mediaType=nothing)
    _ctx = _oacinternal_view_data(_api, objid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function view_data(_api::ExperimentApi, response_stream::Channel, objid::String; _mediaType=nothing)
    _ctx = _oacinternal_view_data(_api, objid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_view_experiment_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_view_experiment(_api::ExperimentApi, objid::String; o=nothing, log=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_view_experiment_ExperimentApi, "/mcmc/object/X{objid}", ["SharingAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "objid", objid)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "o", o; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "log", log; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""View an experiment by its ID.

NOTE: the 'D' prefix in URL is part of the ID.  This API is primarily designed for experiment owners to view their experiments, requiring a valid access token for authentication.  For shared experiments, access is granted based on the sharing configuration: 1. Password-protected sharing: Requires the share password for access, eg. `X-Share-Password` in the header 2. Public sharing: Allows access without any password 3. User-specific sharing: Permits access for designated users without requiring a password

Params:
- objid::String (required)
- o::String
- log::String

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function view_experiment(_api::ExperimentApi, objid::String; o=nothing, log=nothing, _mediaType=nothing)
    _ctx = _oacinternal_view_experiment(_api, objid; o=o, log=log, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function view_experiment(_api::ExperimentApi, response_stream::Channel, objid::String; o=nothing, log=nothing, _mediaType=nothing)
    _ctx = _oacinternal_view_experiment(_api, objid; o=o, log=log, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_view_xp_cloudwatch_logs_ExperimentApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspViewCloudwatchLogsRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_view_xp_cloudwatch_logs(_api::ExperimentApi, objid::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_view_xp_cloudwatch_logs_ExperimentApi, "/mcmc/object/{objid}/cloudwatch-logs", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "objid", objid)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get Cloudwatch logs

As logs may contain sensetive info, this api can only be used by admin

Params:
- objid::String (required)

Return: SuccRspViewCloudwatchLogsRsp, OpenAPI.Clients.ApiResponse
"""
function view_xp_cloudwatch_logs(_api::ExperimentApi, objid::String; _mediaType=nothing)
    _ctx = _oacinternal_view_xp_cloudwatch_logs(_api, objid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function view_xp_cloudwatch_logs(_api::ExperimentApi, response_stream::Channel, objid::String; _mediaType=nothing)
    _ctx = _oacinternal_view_xp_cloudwatch_logs(_api, objid; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export batch_delete_experiment
export create_object_v1
export delete_data
export experiment_notebook
export experiment_notebook_colab
export get_sample_data
export list_objects
export update_data
export update_experiment
export view_data
export view_experiment
export view_xp_cloudwatch_logs
