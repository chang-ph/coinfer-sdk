# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DefaultApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DefaultApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DefaultApi }) = "https://api.coinfer.ai"

const _returntypes_access_token_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspCode2TokenRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_access_token(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_access_token_DefaultApi, "/base/access_token", ["GlobalAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Access Token

Get access token.

Params:

Return: SuccRspCode2TokenRsp, OpenAPI.Clients.ApiResponse
"""
function access_token(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_access_token(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function access_token(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_access_token(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_code2token_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspCode2TokenRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_code2token(_api::DefaultApi, code::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_code2token_DefaultApi, "/base/code2token", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.form, "code", code)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/x-www-form-urlencoded", ] : [_mediaType])
    return _ctx
end

@doc raw"""Code2Token

Exchange code for access token.

Params:
- code::String (required)

Return: SuccRspCode2TokenRsp, OpenAPI.Clients.ApiResponse
"""
function code2token(_api::DefaultApi, code::String; _mediaType=nothing)
    _ctx = _oacinternal_code2token(_api, code; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function code2token(_api::DefaultApi, response_stream::Channel, code::String; _mediaType=nothing)
    _ctx = _oacinternal_code2token(_api, code; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export access_token
export code2token
