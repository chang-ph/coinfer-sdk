# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SystemApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SystemApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SystemApi }) = "https://api.coinfer.ai"

const _returntypes_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspGetConfigRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_config(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_config_SystemApi, "/sys/config", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get configuration about how to run a model.

This API is used to get the configuration about how to run a model. Currently the configuration includes the URL of the proxy lambda function which is used to run the model.

Params:

Return: SuccRspGetConfigRsp, OpenAPI.Clients.ApiResponse
"""
function config(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function config(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_repository_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspDemoListRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_repository(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_repository_SystemApi, "/sys/gallery", [])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List gallery data.

Params:

Return: SuccRspDemoListRsp, OpenAPI.Clients.ApiResponse
"""
function repository(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_repository(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function repository(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_repository(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export config
export repository
