# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SystemApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SystemApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SystemApi }) = "https://api.coinfer.ai"

const _returntypes_branch_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspListBranchRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_branch(_api::SystemApi, repo::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_branch_SystemApi, "/sys/github/branch", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "repo", repo; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List branches.

List branches of the specified repository.

Params:
- repo::String (required)

Return: SuccRspListBranchRsp, OpenAPI.Clients.ApiResponse
"""
function branch(_api::SystemApi, repo::String; _mediaType=nothing)
    _ctx = _oacinternal_branch(_api, repo; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function branch(_api::SystemApi, response_stream::Channel, repo::String; _mediaType=nothing)
    _ctx = _oacinternal_branch(_api, repo; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_colab_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspAny,
)

function _oacinternal_colab(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_colab_SystemApi, "/sys/colab", ["GlobalAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get a link of the notebook in Colab

Create notebook which can be used to load and visualize the experiment result. Save it to Github and returns a link which can be used to open this notebook in Google Colab

Params:

Return: SuccRspAny, OpenAPI.Clients.ApiResponse
"""
function colab(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_colab(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function colab(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_colab(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_config_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspGetConfigRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_config(_api::SystemApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_config_SystemApi, "/sys/config", ["GlobalAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get configuration about how to run a model.

This API is used to get the configuration about how to run a model. Currently the configuration includes the URL of the proxy lambda function which is used to run the model.

Params:

Return: SuccRspGetConfigRsp, OpenAPI.Clients.ApiResponse
"""
function config(_api::SystemApi; _mediaType=nothing)
    _ctx = _oacinternal_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function config(_api::SystemApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_repository_SystemApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspListRepositoryRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_repository(_api::SystemApi; page_no=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "repository", :maximum, page_size, 1000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_repository_SystemApi, "/sys/github/repository", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page_no", page_no; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List repositories and gists.

List repositories and gists of the current (GitHub) user.  Of course this API can only be used when the user is login using the GitHub account.  The return value contains two parts: 1. List of repositories names. 2. List of gists. As the description field can't uniquely identify a gist, the id field is also returned. In practice, the description field should be showed to user for them to select the gist, the ID field should be used to specify a gist.

Params:
- page_no::Int64
- page_size::Int64

Return: SuccRspListRepositoryRsp, OpenAPI.Clients.ApiResponse
"""
function repository(_api::SystemApi; page_no=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_repository(_api; page_no=page_no, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function repository(_api::SystemApi, response_stream::Channel; page_no=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_repository(_api; page_no=page_no, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export branch
export colab
export config
export repository
