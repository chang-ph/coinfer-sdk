# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ModelApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ModelApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ModelApi }) = "https://api.coinfer.ai"

const _returntypes_get_config_ModelApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspGetConfigRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_get_config(_api::ModelApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_config_ModelApi, "/turing/config", ["GlobalAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[DEPRECATED] Get configuration about how to run a model.

DEPRECATED: Use `/sys/config` instead.  This API is used to get the configuration about how to run a model. Currently the configuration includes the URL of the proxy lambda function which is used to run the model.

Params:

Return: SuccRspGetConfigRsp, OpenAPI.Clients.ApiResponse
"""
function get_config(_api::ModelApi; _mediaType=nothing)
    _ctx = _oacinternal_get_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_config(_api::ModelApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_get_config(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_branch_ModelApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspListBranchRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_list_branch(_api::ModelApi, repo::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_branch_ModelApi, "/turing/github/branch", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "repo", repo; style="form", is_explode=true)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[DEPRECATED] List branches.

DEPRECATED: Use `/sys/github/branch` instead.  List branches of the specified repository.

Params:
- repo::String (required)

Return: SuccRspListBranchRsp, OpenAPI.Clients.ApiResponse
"""
function list_branch(_api::ModelApi, repo::String; _mediaType=nothing)
    _ctx = _oacinternal_list_branch(_api, repo; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_branch(_api::ModelApi, response_stream::Channel, repo::String; _mediaType=nothing)
    _ctx = _oacinternal_list_branch(_api, repo; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_repository_ModelApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SuccRspListRepositoryRsp,
    Regex("^" * replace("400", "x"=>".") * "\$") => ErrRsp,
)

function _oacinternal_list_repository(_api::ModelApi; page_no=nothing, page_size=nothing, _mediaType=nothing)
    OpenAPI.validate_param("page_size", "list_repository", :maximum, page_size, 1000, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_repository_ModelApi, "/turing/github/repository", ["GlobalAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "page_no", page_no; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page_size", page_size; style="form", is_explode=true)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""[DEPRECATED] List repositories and gists.

DEPRECATED: Use `/sys/github/repository` instead.  List repositories and gists of the current (GitHub) user.  Of course this API can only be used when the user is login using the GitHub account.  The return value contains two parts: 1. List of repositories names. 2. List of gists. As the description field can't uniquely identify a gist, the id field is also returned. In practice, the description field should be showed to user for them to select the gist, the ID field should be used to specify a gist.

Params:
- page_no::Int64
- page_size::Int64

Return: SuccRspListRepositoryRsp, OpenAPI.Clients.ApiResponse
"""
function list_repository(_api::ModelApi; page_no=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_repository(_api; page_no=page_no, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_repository(_api::ModelApi, response_stream::Channel; page_no=nothing, page_size=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_repository(_api; page_no=page_no, page_size=page_size, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export get_config
export list_branch
export list_repository
