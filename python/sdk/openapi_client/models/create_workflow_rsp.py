# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateWorkflowRsp(BaseModel):
    """
    CreateWorkflowRsp
    """ # noqa: E501
    object_type: StrictStr
    short_id: StrictStr
    name: StrictStr
    model_id: StrictStr
    model_name: StrictStr
    data_id: Optional[StrictStr] = None
    data_name: Optional[StrictStr] = None
    experiment_id: Optional[StrictStr] = None
    experiment_name: Optional[StrictStr] = None
    analyzer_id: Optional[StrictStr] = None
    analyzer_name: Optional[StrictStr] = None
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = ["object_type", "short_id", "name", "model_id", "model_name", "data_id", "data_name", "experiment_id", "experiment_name", "analyzer_id", "analyzer_name", "created_at", "updated_at"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['workflow']):
            raise ValueError("must be one of enum values ('workflow')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWorkflowRsp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if data_id (nullable) is None
        # and model_fields_set contains the field
        if self.data_id is None and "data_id" in self.model_fields_set:
            _dict['data_id'] = None

        # set to None if data_name (nullable) is None
        # and model_fields_set contains the field
        if self.data_name is None and "data_name" in self.model_fields_set:
            _dict['data_name'] = None

        # set to None if experiment_id (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_id is None and "experiment_id" in self.model_fields_set:
            _dict['experiment_id'] = None

        # set to None if experiment_name (nullable) is None
        # and model_fields_set contains the field
        if self.experiment_name is None and "experiment_name" in self.model_fields_set:
            _dict['experiment_name'] = None

        # set to None if analyzer_id (nullable) is None
        # and model_fields_set contains the field
        if self.analyzer_id is None and "analyzer_id" in self.model_fields_set:
            _dict['analyzer_id'] = None

        # set to None if analyzer_name (nullable) is None
        # and model_fields_set contains the field
        if self.analyzer_name is None and "analyzer_name" in self.model_fields_set:
            _dict['analyzer_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWorkflowRsp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type"),
            "short_id": obj.get("short_id"),
            "name": obj.get("name"),
            "model_id": obj.get("model_id"),
            "model_name": obj.get("model_name"),
            "data_id": obj.get("data_id"),
            "data_name": obj.get("data_name"),
            "experiment_id": obj.get("experiment_id"),
            "experiment_name": obj.get("experiment_name"),
            "analyzer_id": obj.get("analyzer_id"),
            "analyzer_name": obj.get("analyzer_name"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


