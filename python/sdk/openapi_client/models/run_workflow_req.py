# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RunWorkflowReq(BaseModel):
    """
    RunWorkflowReq
    """ # noqa: E501
    object_type: StrictStr
    experiment_name: StrictStr = Field(description="experiment name")
    iteration: Optional[StrictInt] = Field(default=1000, description="iteration number")
    parallel: Optional[StrictInt] = Field(default=1, description="parallel number")
    engine: Optional[StrictStr] = 'fargate'
    chains: Optional[StrictInt] = Field(default=1, description="chains number")
    parallel_algorithm: Optional[StrictStr] = 'Serial'
    __properties: ClassVar[List[str]] = ["object_type", "experiment_name", "iteration", "parallel", "engine", "chains", "parallel_algorithm"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['workflow.run']):
            raise ValueError("must be one of enum values ('workflow.run')")
        return value

    @field_validator('engine')
    def engine_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['lambda', 'fargate']):
            raise ValueError("must be one of enum values ('lambda', 'fargate')")
        return value

    @field_validator('parallel_algorithm')
    def parallel_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Serial', 'Threaded', 'Distributed']):
            raise ValueError("must be one of enum values ('Serial', 'Threaded', 'Distributed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RunWorkflowReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RunWorkflowReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type"),
            "experiment_name": obj.get("experiment_name"),
            "iteration": obj.get("iteration") if obj.get("iteration") is not None else 1000,
            "parallel": obj.get("parallel") if obj.get("parallel") is not None else 1,
            "engine": obj.get("engine") if obj.get("engine") is not None else 'fargate',
            "chains": obj.get("chains") if obj.get("chains") is not None else 1,
            "parallel_algorithm": obj.get("parallel_algorithm") if obj.get("parallel_algorithm") is not None else 'Serial'
        })
        return _obj


