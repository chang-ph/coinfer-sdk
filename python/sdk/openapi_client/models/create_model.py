# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    The version of the OpenAPI document: 0.0.1749169165+55fbd70
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_function_kind import CloudFunctionKind
from openapi_client.models.cloud_function_lang import CloudFunctionLang
from openapi_client.models.model_content import ModelContent
from typing import Optional, Set
from typing_extensions import Self

class CreateModel(BaseModel):
    """
    CreateModel
    """ # noqa: E501
    object_type: StrictStr
    repo: Optional[StrictStr] = Field(default='', description="repo in the form of repo_owner/repo_name or gist id in case of importing from gist")
    branch: Optional[StrictStr] = Field(default='', description="branch name or gist description in case of importing from gist")
    type: Optional[StrictStr] = Field(default='local', description="repo or gist")
    model_name: Optional[StrictStr] = Field(default='', description="[deprecated] model name")
    env: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default='', description="model name")
    content: Optional[ModelContent] = None
    is_demo: Optional[StrictBool] = False
    kind: Optional[CloudFunctionKind] = None
    single_instance: Optional[StrictBool] = Field(default=True, description="Only allow one instance to run as cloud function at a time.")
    lang: Optional[CloudFunctionLang] = None
    entrance_file: Optional[StrictStr] = ''
    __properties: ClassVar[List[str]] = ["object_type", "repo", "branch", "type", "model_name", "env", "name", "content", "is_demo", "kind", "single_instance", "lang", "entrance_file"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['model']):
            raise ValueError("must be one of enum values ('model')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['repo', 'gist', 'local']):
            raise ValueError("must be one of enum values ('repo', 'gist', 'local')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # set to None if env (nullable) is None
        # and model_fields_set contains the field
        if self.env is None and "env" in self.model_fields_set:
            _dict['env'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type"),
            "repo": obj.get("repo") if obj.get("repo") is not None else '',
            "branch": obj.get("branch") if obj.get("branch") is not None else '',
            "type": obj.get("type") if obj.get("type") is not None else 'local',
            "model_name": obj.get("model_name") if obj.get("model_name") is not None else '',
            "env": obj.get("env"),
            "name": obj.get("name") if obj.get("name") is not None else '',
            "content": ModelContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "is_demo": obj.get("is_demo") if obj.get("is_demo") is not None else False,
            "kind": obj.get("kind"),
            "single_instance": obj.get("single_instance") if obj.get("single_instance") is not None else True,
            "lang": obj.get("lang"),
            "entrance_file": obj.get("entrance_file") if obj.get("entrance_file") is not None else ''
        })
        return _obj


