# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ViewObject(BaseModel):
    """
    ViewObject
    """ # noqa: E501
    object_type: Optional[StrictStr] = ''
    share_id: Optional[StrictStr] = Field(default='', description="                 Only appicable to object_type == model or object_type == experiment                 If this field is empty, returns the latest version of the objects.                 otherwise returns the specified share snapshot")
    sampledata: Optional[StrictBool] = False
    fmt: Optional[StrictStr] = 'csv'
    n_iteration: Optional[StrictInt] = None
    cloudwatch_log: Optional[StrictBool] = False
    batch_id: Optional[StrictStr] = ''
    run_id: Optional[StrictStr] = ''
    plot: Optional[StrictBool] = Field(default=False, description="get arviz plot")
    view_analyzer: Optional[StrictBool] = Field(default=False, description="view analyzer result", alias="view-analyzer")
    __properties: ClassVar[List[str]] = ["object_type", "share_id", "sampledata", "fmt", "n_iteration", "cloudwatch_log", "batch_id", "run_id", "plot", "view-analyzer"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['model', 'experiment', 'share', 'event', 'callback', 'relation', 'data', 'workflow', '']):
            raise ValueError("must be one of enum values ('model', 'experiment', 'share', 'event', 'callback', 'relation', 'data', 'workflow', '')")
        return value

    @field_validator('fmt')
    def fmt_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['csv', 'grist', 'arviz']):
            raise ValueError("must be one of enum values ('csv', 'grist', 'arviz')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ViewObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if n_iteration (nullable) is None
        # and model_fields_set contains the field
        if self.n_iteration is None and "n_iteration" in self.model_fields_set:
            _dict['n_iteration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ViewObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type") if obj.get("object_type") is not None else '',
            "share_id": obj.get("share_id") if obj.get("share_id") is not None else '',
            "sampledata": obj.get("sampledata") if obj.get("sampledata") is not None else False,
            "fmt": obj.get("fmt") if obj.get("fmt") is not None else 'csv',
            "n_iteration": obj.get("n_iteration"),
            "cloudwatch_log": obj.get("cloudwatch_log") if obj.get("cloudwatch_log") is not None else False,
            "batch_id": obj.get("batch_id") if obj.get("batch_id") is not None else '',
            "run_id": obj.get("run_id") if obj.get("run_id") is not None else '',
            "plot": obj.get("plot") if obj.get("plot") is not None else False,
            "view-analyzer": obj.get("view-analyzer") if obj.get("view-analyzer") is not None else False
        })
        return _obj


