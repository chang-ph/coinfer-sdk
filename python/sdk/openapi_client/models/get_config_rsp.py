# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetConfigRsp(BaseModel):
    """
    GetConfigRsp
    """ # noqa: E501
    run_model_url: StrictStr
    max_upload_sample_size: StrictInt
    max_upload_sample_file: StrictInt
    upload_file_types: StrictStr
    google_client_id: StrictStr
    google_app_id: StrictStr
    arviz_plotting_endpoint: Optional[StrictStr]
    default_model: StrictStr
    default_data: StrictStr
    default_analyzer: StrictStr
    default_data_script: StrictStr
    __properties: ClassVar[List[str]] = ["run_model_url", "max_upload_sample_size", "max_upload_sample_file", "upload_file_types", "google_client_id", "google_app_id", "arviz_plotting_endpoint", "default_model", "default_data", "default_analyzer", "default_data_script"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetConfigRsp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if arviz_plotting_endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.arviz_plotting_endpoint is None and "arviz_plotting_endpoint" in self.model_fields_set:
            _dict['arviz_plotting_endpoint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetConfigRsp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "run_model_url": obj.get("run_model_url"),
            "max_upload_sample_size": obj.get("max_upload_sample_size"),
            "max_upload_sample_file": obj.get("max_upload_sample_file"),
            "upload_file_types": obj.get("upload_file_types"),
            "google_client_id": obj.get("google_client_id"),
            "google_app_id": obj.get("google_app_id"),
            "arviz_plotting_endpoint": obj.get("arviz_plotting_endpoint"),
            "default_model": obj.get("default_model"),
            "default_data": obj.get("default_data"),
            "default_analyzer": obj.get("default_analyzer"),
            "default_data_script": obj.get("default_data_script")
        })
        return _obj


