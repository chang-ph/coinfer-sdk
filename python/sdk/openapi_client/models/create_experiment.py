# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateExperiment(BaseModel):
    """
    CreateExperiment
    """ # noqa: E501
    object_type: StrictStr
    model_id: Optional[StrictStr] = ''
    workflow_id: Optional[StrictStr] = ''
    input_id: Optional[StrictStr] = ''
    xp_meta: Optional[Any] = None
    meta: Optional[Any] = None
    name: Optional[StrictStr] = ''
    run_on: Optional[StrictStr] = 'Lambda'
    data_file_type: Optional[StrictStr] = None
    data_files: Optional[List[StrictStr]] = Field(default=None, description="File data in text format")
    data_uris: Optional[List[StrictStr]] = Field(default=None, description="File data URI")
    __properties: ClassVar[List[str]] = ["object_type", "model_id", "workflow_id", "input_id", "xp_meta", "meta", "name", "run_on", "data_file_type", "data_files", "data_uris"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['experiment']):
            raise ValueError("must be one of enum values ('experiment')")
        return value

    @field_validator('run_on')
    def run_on_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Lambda', 'Fargate', 'Local']):
            raise ValueError("must be one of enum values ('Lambda', 'Fargate', 'Local')")
        return value

    @field_validator('data_file_type')
    def data_file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['turing csv', 'stan csv', 'arviz netcdf']):
            raise ValueError("must be one of enum values ('turing csv', 'stan csv', 'arviz netcdf')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateExperiment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if xp_meta (nullable) is None
        # and model_fields_set contains the field
        if self.xp_meta is None and "xp_meta" in self.model_fields_set:
            _dict['xp_meta'] = None

        # set to None if meta (nullable) is None
        # and model_fields_set contains the field
        if self.meta is None and "meta" in self.model_fields_set:
            _dict['meta'] = None

        # set to None if data_file_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_file_type is None and "data_file_type" in self.model_fields_set:
            _dict['data_file_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateExperiment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type"),
            "model_id": obj.get("model_id") if obj.get("model_id") is not None else '',
            "workflow_id": obj.get("workflow_id") if obj.get("workflow_id") is not None else '',
            "input_id": obj.get("input_id") if obj.get("input_id") is not None else '',
            "xp_meta": obj.get("xp_meta"),
            "meta": obj.get("meta"),
            "name": obj.get("name") if obj.get("name") is not None else '',
            "run_on": obj.get("run_on") if obj.get("run_on") is not None else 'Lambda',
            "data_file_type": obj.get("data_file_type"),
            "data_files": obj.get("data_files"),
            "data_uris": obj.get("data_uris")
        })
        return _obj


