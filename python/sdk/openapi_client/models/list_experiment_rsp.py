# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    The version of the OpenAPI document: 0.0.1750036858+bc6226b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.meta_model import MetaModel
from openapi_client.models.share_info_model import ShareInfoModel
from typing import Optional, Set
from typing_extensions import Self

class ListExperimentRsp(BaseModel):
    """
    ListExperimentRsp
    """ # noqa: E501
    short_id: StrictStr
    name: StrictStr
    model_id: Optional[StrictStr] = None
    status: StrictStr
    meta: Optional[MetaModel] = None
    n_chains: StrictInt
    n_variables: StrictInt
    n_samples: StrictInt
    sample_update_time: datetime
    run_on: StrictStr
    share_info: Optional[List[ShareInfoModel]] = None
    model_name: StrictStr
    __properties: ClassVar[List[str]] = ["short_id", "name", "model_id", "status", "meta", "n_chains", "n_variables", "n_samples", "sample_update_time", "run_on", "share_info", "model_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListExperimentRsp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in share_info (list)
        _items = []
        if self.share_info:
            for _item_share_info in self.share_info:
                if _item_share_info:
                    _items.append(_item_share_info.to_dict())
            _dict['share_info'] = _items
        # set to None if model_id (nullable) is None
        # and model_fields_set contains the field
        if self.model_id is None and "model_id" in self.model_fields_set:
            _dict['model_id'] = None

        # set to None if meta (nullable) is None
        # and model_fields_set contains the field
        if self.meta is None and "meta" in self.model_fields_set:
            _dict['meta'] = None

        # set to None if share_info (nullable) is None
        # and model_fields_set contains the field
        if self.share_info is None and "share_info" in self.model_fields_set:
            _dict['share_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListExperimentRsp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "short_id": obj.get("short_id"),
            "name": obj.get("name"),
            "model_id": obj.get("model_id"),
            "status": obj.get("status"),
            "meta": MetaModel.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "n_chains": obj.get("n_chains"),
            "n_variables": obj.get("n_variables"),
            "n_samples": obj.get("n_samples"),
            "sample_update_time": obj.get("sample_update_time"),
            "run_on": obj.get("run_on"),
            "share_info": [ShareInfoModel.from_dict(_item) for _item in obj["share_info"]] if obj.get("share_info") is not None else None,
            "model_name": obj.get("model_name")
        })
        return _obj


