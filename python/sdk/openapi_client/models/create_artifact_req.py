# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateArtifactReq(BaseModel):
    """
    CreateArtifactReq
    """ # noqa: E501
    object_type: StrictStr
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="Artifact name")
    description: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default='', description="Artifact description")
    is_base64: Optional[StrictBool] = Field(default=False, description="Whether the data in `data_file` is base64 encoded")
    data_file: Optional[StrictStr] = Field(default='', description="File data in text format")
    data_uri: Optional[StrictStr] = Field(default='', description="File data URI")
    __properties: ClassVar[List[str]] = ["object_type", "name", "description", "is_base64", "data_file", "data_uri"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['artifact']):
            raise ValueError("must be one of enum values ('artifact')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateArtifactReq from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateArtifactReq from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type"),
            "name": obj.get("name"),
            "description": obj.get("description") if obj.get("description") is not None else '',
            "is_base64": obj.get("is_base64") if obj.get("is_base64") is not None else False,
            "data_file": obj.get("data_file") if obj.get("data_file") is not None else '',
            "data_uri": obj.get("data_uri") if obj.get("data_uri") is not None else ''
        })
        return _obj


