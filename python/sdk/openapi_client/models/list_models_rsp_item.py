# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_meta_in_rsp import ModelMetaInRsp
from typing import Optional, Set
from typing_extensions import Self

class ListModelsRspItem(BaseModel):
    """
    ListModelsRspItem
    """ # noqa: E501
    object_type: StrictStr
    id: StrictInt
    short_id: StrictStr
    name: StrictStr
    content: Optional[Any] = None
    meta: ModelMetaInRsp
    tags: List[StrictStr]
    lambda_image_url: Optional[StrictStr] = None
    lambda_image_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["object_type", "id", "short_id", "name", "content", "meta", "tags", "lambda_image_url", "lambda_image_name"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['model']):
            raise ValueError("must be one of enum values ('model')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListModelsRspItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict['meta'] = self.meta.to_dict()
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if lambda_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.lambda_image_url is None and "lambda_image_url" in self.model_fields_set:
            _dict['lambda_image_url'] = None

        # set to None if lambda_image_name (nullable) is None
        # and model_fields_set contains the field
        if self.lambda_image_name is None and "lambda_image_name" in self.model_fields_set:
            _dict['lambda_image_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListModelsRspItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "object_type": obj.get("object_type"),
            "id": obj.get("id"),
            "short_id": obj.get("short_id"),
            "name": obj.get("name"),
            "content": obj.get("content"),
            "meta": ModelMetaInRsp.from_dict(obj["meta"]) if obj.get("meta") is not None else None,
            "tags": obj.get("tags"),
            "lambda_image_url": obj.get("lambda_image_url"),
            "lambda_image_name": obj.get("lambda_image_name")
        })
        return _obj


