# coding: utf-8

"""
    Coinfer Server API

     This part of document describes the HTTP APIs of the Coinfer cloud.  

    The version of the OpenAPI document: 0.0.1747269724+a7f6527
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ListObjectTmp(BaseModel):
    """
    ListObjectTmp
    """ # noqa: E501
    page_no: Optional[StrictInt] = Field(default=1, description="page number")
    page_size: Optional[Annotated[int, Field(le=1000, strict=True)]] = Field(default=100, description="page size")
    object_type: StrictStr
    with_share_info: Optional[StrictBool] = Field(default=False, description="Whether to return the related share info")
    shared_by_me: Optional[StrictBool] = Field(default=False, description="Filter objects shared by the current user")
    shared_with_me: Optional[StrictBool] = Field(default=False, description="Filter objects shared with the current user")
    model_ids: Optional[List[StrictStr]] = None
    status: Optional[StrictStr] = ''
    run_on: Optional[StrictStr] = ''
    has_model: Optional[StrictStr] = ''
    __properties: ClassVar[List[str]] = ["page_no", "page_size", "object_type", "with_share_info", "shared_by_me", "shared_with_me", "model_ids", "status", "run_on", "has_model"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['model', 'experiment', 'share']):
            raise ValueError("must be one of enum values ('model', 'experiment', 'share')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEW', 'RUN', 'FIN', 'ERR', '']):
            raise ValueError("must be one of enum values ('NEW', 'RUN', 'FIN', 'ERR', '')")
        return value

    @field_validator('run_on')
    def run_on_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Lambda', 'Fargate', 'Local', '']):
            raise ValueError("must be one of enum values ('Lambda', 'Fargate', 'Local', '')")
        return value

    @field_validator('has_model')
    def has_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['true', 'false', '']):
            raise ValueError("must be one of enum values ('true', 'false', '')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListObjectTmp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListObjectTmp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "page_no": obj.get("page_no") if obj.get("page_no") is not None else 1,
            "page_size": obj.get("page_size") if obj.get("page_size") is not None else 100,
            "object_type": obj.get("object_type"),
            "with_share_info": obj.get("with_share_info") if obj.get("with_share_info") is not None else False,
            "shared_by_me": obj.get("shared_by_me") if obj.get("shared_by_me") is not None else False,
            "shared_with_me": obj.get("shared_with_me") if obj.get("shared_with_me") is not None else False,
            "model_ids": obj.get("model_ids"),
            "status": obj.get("status") if obj.get("status") is not None else '',
            "run_on": obj.get("run_on") if obj.get("run_on") is not None else '',
            "has_model": obj.get("has_model") if obj.get("has_model") is not None else ''
        })
        return _obj


